using System;
using ScriptableObjects;
using UnityEngine;

namespace Classes
{
    public class CitybuildingManager
    {
        public BuildingUpgrade PlayerDroneSchool;
        public BuildingUpgrade PlayerEnergyGenerator;
        public BuildingUpgrade PlayerFighterSchool;
        public BuildingUpgrade PlayerFoodGenerator;
        public BuildingUpgrade PlayerMainCamp;
        public BuildingUpgrade PlayerMedicSchool;
        public Resources PlayerResources;
        public BuildingUpgrade PlayerRobotSchool;
        public BuildingUpgrade PlayerShooterSchool;
        public BuildingUpgrade PlayerTitanGenerator;
        public BuildingUpgrade PlayerWaterGenerator;

        public float PlayerCitySatisfaction => throw new NotImplementedException();

        private BuildingUpgrade[] PlayerBuildings
        {
            get
            {
                return new[]
                {
                    PlayerMainCamp,
                    PlayerTitanGenerator,
                    PlayerEnergyGenerator,
                    PlayerWaterGenerator,
                    PlayerFoodGenerator,
                    PlayerFighterSchool,
                    PlayerShooterSchool,
                    PlayerDroneSchool,
                    PlayerMedicSchool,
                    PlayerRobotSchool
                };
            }
        }
        public void Save() 
        {
            Debug.Log("Saving settings");
            PlayerPrefs.SetInt("PlayerBuildings/MainCamp", PlayerMainCamp.level);
            PlayerPrefs.SetInt("PlayerBuildings/TitanGenerator", PlayerTitanGenerator.level);
            PlayerPrefs.SetInt("PlayerBuildings/EnergyGenerator", PlayerEnergyGenerator.level);
            PlayerPrefs.SetInt("PlayerBuildings/WaterGenerator", PlayerWaterGenerator.level);
            PlayerPrefs.SetInt("PlayerBuildings/FoodGenerator", PlayerFoodGenerator.level);
            PlayerPrefs.SetInt("PlayerBuildings/FighterSchool", PlayerFighterSchool.level);
            PlayerPrefs.SetInt("PlayerBuildings/ShooterSchool", PlayerShooterSchool.level);
            PlayerPrefs.SetInt("PlayerBuildings/DroneSchool", PlayerDroneSchool.level);
            PlayerPrefs.SetInt("PlayerBuildings/MedicSchool", PlayerMedicSchool.level);
            PlayerPrefs.SetInt("PlayerBuildings/RobotSchool", PlayerRobotSchool.level);
            PlayerPrefs.SetInt("PlayerResources/Energy", PlayerResources.energy);
            PlayerPrefs.SetInt("PlayerResources/Titan", PlayerResources.titan);
            PlayerPrefs.SetInt("PlayerResources/Water", PlayerResources.water);
            PlayerPrefs.SetInt("PlayerResources/Food", PlayerResources.food);
            PlayerPrefs.Save();
        }
        public void Load() // Called by the GM when loading the game
        {
            PlayerResources = new Resources
            {
                energy = PlayerPrefs.GetInt("PlayerResources/Energy", 10),
                titan = PlayerPrefs.GetInt("PlayerResources/Titan", 11),
                water = PlayerPrefs.GetInt("PlayerResources/Water", 12),
                food = PlayerPrefs.GetInt("PlayerResources/Food", 13)
            };

            PlayerMainCamp = MainCamp.upgrades[PlayerPrefs.GetInt("PlayerBuildings/MainCamp", 0)];
            PlayerTitanGenerator = TitanGenerator.upgrades[PlayerPrefs.GetInt("PlayerBuildings/TitanGenerator", 0)];
            PlayerEnergyGenerator = EnergyGenerator.upgrades[PlayerPrefs.GetInt("PlayerBuildings/EnergyGenerator", 0)];
            PlayerWaterGenerator = WaterGenerator.upgrades[PlayerPrefs.GetInt("PlayerBuildings/WaterGenerator", 0)];
            PlayerFoodGenerator = FoodGenerator.upgrades[PlayerPrefs.GetInt("PlayerBuildings/FoodGenerator", 0)];
            PlayerFighterSchool = FighterSchool.upgrades[PlayerPrefs.GetInt("PlayerBuildings/FighterSchool", 0)];
            PlayerShooterSchool = ShooterSchool.upgrades[PlayerPrefs.GetInt("PlayerBuildings/ShooterSchool", 0)];
            PlayerDroneSchool = DroneSchool.upgrades[PlayerPrefs.GetInt("PlayerBuildings/DroneSchool", 0)];
            PlayerMedicSchool = MedicSchool.upgrades[PlayerPrefs.GetInt("PlayerBuildings/MedicSchool", 0)];
            PlayerRobotSchool = RobotSchool.upgrades[PlayerPrefs.GetInt("PlayerBuildings/RobotSchool", 0)];
        }

        

        public void NextDay()
        {
            foreach (var building in PlayerBuildings) PlayerResources += building.output;
        }

        #region CanUpgradeX getters (generated by Github Copilot)

        public bool CanUpgradeMainCamp => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;
        public bool CanUpgradeTitanGenerator => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;
        public bool CanUpgradeEnergyGenerator => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;
        public bool CanUpgradeWaterGenerator => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;
        public bool CanUpgradeFoodGenerator => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;
        public bool CanUpgradeFighterSchool => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;
        public bool CanUpgradeShooterSchool => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;
        public bool CanUpgradeDroneSchool => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;
        public bool CanUpgradeMedicSchool => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;
        public bool CanUpgradeRobotSchool => MainCamp.upgrades[PlayerMainCamp.level + 1].cost <= PlayerResources;

        #endregion>

        #region XNextUpgrade getters (generated by Github Copilot)

        public BuildingUpgrade MainCampNextUpgrade => MainCamp.upgrades.Length > PlayerMainCamp.level
            ? MainCamp.upgrades[PlayerMainCamp.level + 1]
            : PlayerMainCamp;

        public BuildingUpgrade TitanGeneratorNextUpgrade => TitanGenerator.upgrades.Length > PlayerTitanGenerator.level
            ? TitanGenerator.upgrades[PlayerTitanGenerator.level + 1]
            : PlayerTitanGenerator;

        public BuildingUpgrade EnergyGeneratorNextUpgrade =>
            EnergyGenerator.upgrades.Length > PlayerEnergyGenerator.level
                ? EnergyGenerator.upgrades[PlayerEnergyGenerator.level + 1]
                : PlayerEnergyGenerator;

        public BuildingUpgrade WaterGeneratorNextUpgrade => WaterGenerator.upgrades.Length > PlayerWaterGenerator.level
            ? WaterGenerator.upgrades[PlayerWaterGenerator.level + 1]
            : PlayerWaterGenerator;

        public BuildingUpgrade FoodGeneratorNextUpgrade => FoodGenerator.upgrades.Length > PlayerFoodGenerator.level
            ? FoodGenerator.upgrades[PlayerFoodGenerator.level + 1]
            : PlayerFoodGenerator;

        public BuildingUpgrade FighterSchoolNextUpgrade => FighterSchool.upgrades.Length > PlayerFighterSchool.level
            ? FighterSchool.upgrades[PlayerFighterSchool.level + 1]
            : PlayerFighterSchool;

        public BuildingUpgrade ShooterSchoolNextUpgrade => ShooterSchool.upgrades.Length > PlayerShooterSchool.level
            ? ShooterSchool.upgrades[PlayerShooterSchool.level + 1]
            : PlayerShooterSchool;

        public BuildingUpgrade DroneSchoolNextUpgrade => DroneSchool.upgrades.Length > PlayerDroneSchool.level
            ? DroneSchool.upgrades[PlayerDroneSchool.level + 1]
            : PlayerDroneSchool;

        public BuildingUpgrade MedicSchoolNextUpgrade => MedicSchool.upgrades.Length > PlayerMedicSchool.level
            ? MedicSchool.upgrades[PlayerMedicSchool.level + 1]
            : PlayerMedicSchool;

        public BuildingUpgrade RobotSchoolNextUpgrade => RobotSchool.upgrades.Length > PlayerRobotSchool.level
            ? RobotSchool.upgrades[PlayerRobotSchool.level + 1]
            : PlayerRobotSchool;

        #endregion

        #region Buildings (set by the GM)

        public Building MainCamp;
        public Building TitanGenerator;
        public Building EnergyGenerator;
        public Building WaterGenerator;
        public Building FoodGenerator;
        public Building FighterSchool;
        public Building ShooterSchool;
        public Building DroneSchool;
        public Building MedicSchool;
        public Building RobotSchool;

        #endregion

        #region Upgrade Methods (generated by GitHub Copilot)

        public void UpgradeMainCamp()
        {
            try
            {
                var nextUpgrade = MainCamp.upgrades[PlayerMainCamp.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerMainCamp = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        public void UpgradeTitanGenerator()
        {
            try
            {
                var nextUpgrade = TitanGenerator.upgrades[PlayerTitanGenerator.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerTitanGenerator = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        public void UpgradeEnergyGenerator()
        {
            try
            {
                var nextUpgrade = EnergyGenerator.upgrades[PlayerEnergyGenerator.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerEnergyGenerator = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        public void UpgradeWaterGenerator()
        {
            try
            {
                var nextUpgrade = WaterGenerator.upgrades[PlayerWaterGenerator.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerWaterGenerator = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        public void UpgradeFoodGenerator()
        {
            try
            {
                var nextUpgrade = FoodGenerator.upgrades[PlayerFoodGenerator.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerFoodGenerator = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        public void UpgradeFighterSchool()
        {
            try
            {
                var nextUpgrade = FighterSchool.upgrades[PlayerFighterSchool.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerFighterSchool = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        public void UpgradeShooterSchool()
        {
            try
            {
                var nextUpgrade = ShooterSchool.upgrades[PlayerShooterSchool.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerShooterSchool = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        public void UpgradeDroneSchool()
        {
            try
            {
                var nextUpgrade = DroneSchool.upgrades[PlayerDroneSchool.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerDroneSchool = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        public void UpgradeMedicSchool()
        {
            try
            {
                var nextUpgrade = MedicSchool.upgrades[PlayerMedicSchool.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerMedicSchool = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        public void UpgradeRobotSchool()
        {
            try
            {
                var nextUpgrade = RobotSchool.upgrades[PlayerRobotSchool.level + 1];

                if (nextUpgrade.cost > PlayerResources) return;

                PlayerResources -= nextUpgrade.cost;
                PlayerRobotSchool = nextUpgrade;
            }
            catch (IndexOutOfRangeException)
            {
            }
        }

        #endregion
    }
}